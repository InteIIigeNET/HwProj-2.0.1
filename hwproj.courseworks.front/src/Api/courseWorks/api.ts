/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * CourseWorks API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";
import AuthService from "../../services/AuthService";
import React from "react";

const BASE_PATH = "http://localhost:5000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddDeadlineViewModel
 */
export interface AddDeadlineViewModel {
    /**
     * 
     * @type {string}
     * @memberof AddDeadlineViewModel
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDeadlineViewModel
     */
    date?: string;
}

/**
 * 
 * @export
 * @interface AddDirectionViewModel
 */
export interface AddDirectionViewModel {
    /**
     * 
     * @type {string}
     * @memberof AddDirectionViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDirectionViewModel
     */
    curatorId?: string;
}

/**
 * 
 * @export
 * @interface CreateApplicationViewModel
 */
export interface CreateApplicationViewModel {
    /**
     * 
     * @type {string}
     * @memberof CreateApplicationViewModel
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface CreateCourseWorkViewModel
 */
export interface CreateCourseWorkViewModel {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    overview?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    requirements?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCourseWorkViewModel
     */
    course?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    consultantName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    consultantContact?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    supervisorName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseWorkViewModel
     */
    supervisorContact?: string;
}

/**
 * 
 * @export
 * @interface DeadlineDTO
 */
export interface DeadlineDTO {
    /**
     * 
     * @type {string}
     * @memberof DeadlineDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DeadlineDTO
     */
    date?: string;
}

/**
 * 
 * @export
 * @interface DetailCourseWorkDTO
 */
export interface DetailCourseWorkDTO {
    /**
     * 
     * @type {number}
     * @memberof DetailCourseWorkDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    overview?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    requirements?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailCourseWorkDTO
     */
    course?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    creationTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DetailCourseWorkDTO
     */
    isCompleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    reference?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    consultantName?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    consultantContact?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    supervisorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    supervisorContact?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    reviewerName?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailCourseWorkDTO
     */
    studentName?: string;
    /**
     * 
     * @type {number}
     * @memberof DetailCourseWorkDTO
     */
    studentCourse?: number;
}

/**
 * 
 * @export
 * @interface DirectionDTO
 */
export interface DirectionDTO {
    /**
     * 
     * @type {number}
     * @memberof DirectionDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DirectionDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectionDTO
     */
    curatorName?: string;
}

/**
 * 
 * @export
 * @interface EntityTagHeaderValue
 */
export interface EntityTagHeaderValue {
    /**
     * 
     * @type {StringSegment}
     * @memberof EntityTagHeaderValue
     */
    tag?: StringSegment;
    /**
     * 
     * @type {boolean}
     * @memberof EntityTagHeaderValue
     */
    isWeak?: boolean;
}

/**
 * 
 * @export
 * @interface FileContentResult
 */
export interface FileContentResult {
    /**
     * 
     * @type {string}
     * @memberof FileContentResult
     */
    fileContents?: string;
    /**
     * 
     * @type {string}
     * @memberof FileContentResult
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof FileContentResult
     */
    fileDownloadName?: string;
    /**
     * 
     * @type {Date}
     * @memberof FileContentResult
     */
    lastModified?: Date;
    /**
     * 
     * @type {EntityTagHeaderValue}
     * @memberof FileContentResult
     */
    entityTag?: EntityTagHeaderValue;
    /**
     * 
     * @type {boolean}
     * @memberof FileContentResult
     */
    enableRangeProcessing?: boolean;
}

/**
 * 
 * @export
 * @interface IFormFile
 */
export interface IFormFile {
    /**
     * 
     * @type {string}
     * @memberof IFormFile
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof IFormFile
     */
    contentDisposition?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof IFormFile
     */
    headers?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {number}
     * @memberof IFormFile
     */
    length?: number;
    /**
     * 
     * @type {string}
     * @memberof IFormFile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IFormFile
     */
    fileName?: string;
}

/**
 * 
 * @export
 * @interface LecturerApplicationDTO
 */
export interface LecturerApplicationDTO {
    /**
     * 
     * @type {number}
     * @memberof LecturerApplicationDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof LecturerApplicationDTO
     */
    courseWorkId?: number;
    /**
     * 
     * @type {string}
     * @memberof LecturerApplicationDTO
     */
    courseWorkTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof LecturerApplicationDTO
     */
    courseWorkOverview?: string;
    /**
     * 
     * @type {string}
     * @memberof LecturerApplicationDTO
     */
    studentName?: string;
    /**
     * 
     * @type {number}
     * @memberof LecturerApplicationDTO
     */
    studentGroup?: number;
    /**
     * 
     * @type {string}
     * @memberof LecturerApplicationDTO
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof LecturerApplicationDTO
     */
    date?: string;
}

/**
 * 
 * @export
 * @interface OverviewApplicationDTO
 */
export interface OverviewApplicationDTO {
    /**
     * 
     * @type {number}
     * @memberof OverviewApplicationDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof OverviewApplicationDTO
     */
    courseWorkId?: number;
    /**
     * 
     * @type {string}
     * @memberof OverviewApplicationDTO
     */
    courseWorkTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof OverviewApplicationDTO
     */
    studentName?: string;
    /**
     * 
     * @type {number}
     * @memberof OverviewApplicationDTO
     */
    studentGroup?: number;
    /**
     * 
     * @type {string}
     * @memberof OverviewApplicationDTO
     */
    date?: string;
}

/**
 * 
 * @export
 * @interface OverviewCourseWorkDTO
 */
export interface OverviewCourseWorkDTO {
    /**
     * 
     * @type {number}
     * @memberof OverviewCourseWorkDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OverviewCourseWorkDTO
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof OverviewCourseWorkDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof OverviewCourseWorkDTO
     */
    supervisorName?: string;
    /**
     * 
     * @type {string}
     * @memberof OverviewCourseWorkDTO
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof OverviewCourseWorkDTO
     */
    course?: number;
    /**
     * 
     * @type {string}
     * @memberof OverviewCourseWorkDTO
     */
    studentName?: string;
}

/**
 * 
 * @export
 * @interface StringSegment
 */
export interface StringSegment {
    /**
     * 
     * @type {string}
     * @memberof StringSegment
     */
    buffer?: string;
    /**
     * 
     * @type {number}
     * @memberof StringSegment
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof StringSegment
     */
    length?: number;
    /**
     * 
     * @type {string}
     * @memberof StringSegment
     */
    value?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StringSegment
     */
    hasValue?: boolean;
}

/**
 * 
 * @export
 * @interface StudentApplicationDTO
 */
export interface StudentApplicationDTO {
    /**
     * 
     * @type {number}
     * @memberof StudentApplicationDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof StudentApplicationDTO
     */
    courseWorkId?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentApplicationDTO
     */
    courseWorkTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentApplicationDTO
     */
    courseWorkOverview?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentApplicationDTO
     */
    courseWorkSupervisorName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentApplicationDTO
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentApplicationDTO
     */
    date?: string;
}

/**
 * 
 * @export
 * @interface WorkFileDTO
 */
export interface WorkFileDTO {
    /**
     * 
     * @type {string}
     * @memberof WorkFileDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkFileDTO
     */
    fileName?: string;
}


/**
 * CourseWorksApi - fetch parameter creator
 * @export
 */
export const CourseWorksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksApplicationsByStatusGet(status: string, options: any = {}): FetchArgs {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling apiCourseWorksApplicationsByStatusGet.');
            }
            const localVarPath = `/api/course_works/applications/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksAvailableGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/course_works/available`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdDeadlinesGet.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/deadlines`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeDelete(type: string, courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling apiCourseWorksByCourseWorkIdFilesByTypeDelete.');
            }
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdFilesByTypeDelete.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/files/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeGet(type: string, courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling apiCourseWorksByCourseWorkIdFilesByTypeGet.');
            }
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdFilesByTypeGet.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/files/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesGet(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdFilesGet.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/files`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdGet(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdGet.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdReferenceDelete.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/reference`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [reference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferencePost(courseWorkId: number, reference?: string, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiCourseWorksByCourseWorkIdReferencePost.');
            }
            const localVarPath = `/api/course_works/{courseWorkId}/reference`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reference || {}) : (reference || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByRoleMyByStatusGet(role: string, status: string, options: any = {}): FetchArgs {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling apiCourseWorksByRoleMyByStatusGet.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling apiCourseWorksByRoleMyByStatusGet.');
            }
            const localVarPath = `/api/course_works/{role}/my/{status}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksDirectionsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/course_works/directions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksReviewersNewPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/course_works/reviewers/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksTestPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/course_works/test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseWorksApi - functional programming interface
 * @export
 */
export const CourseWorksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksApplicationsByStatusGet(status: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OverviewApplicationDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksApplicationsByStatusGet(status, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksAvailableGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OverviewCourseWorkDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksAvailableGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DeadlineDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeDelete(type: string, courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdFilesByTypeDelete(type, courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeGet(type: string, courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileContentResult> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdFilesByTypeGet(type, courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesGet(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<WorkFileDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdFilesGet(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdGet(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailCourseWorkDTO> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdGet(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [reference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferencePost(courseWorkId: number, reference?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByCourseWorkIdReferencePost(courseWorkId, reference, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByRoleMyByStatusGet(role: string, status: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OverviewCourseWorkDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksByRoleMyByStatusGet(role, status, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksDirectionsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DirectionDTO>> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksDirectionsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksReviewersNewPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksReviewersNewPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksTestPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CourseWorksApiFetchParamCreator(configuration).apiCourseWorksTestPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CourseWorksApi - factory interface
 * @export
 */
export const CourseWorksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksApplicationsByStatusGet(status: string, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksApplicationsByStatusGet(status, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksAvailableGet(options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksAvailableGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeDelete(type: string, courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdFilesByTypeDelete(type, courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesByTypeGet(type: string, courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdFilesByTypeGet(type, courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdFilesGet(courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdFilesGet(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdGet(courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdGet(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId: number, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [reference] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByCourseWorkIdReferencePost(courseWorkId: number, reference?: string, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByCourseWorkIdReferencePost(courseWorkId, reference, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} role 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksByRoleMyByStatusGet(role: string, status: string, options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksByRoleMyByStatusGet(role, status, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksDirectionsGet(options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksDirectionsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksReviewersNewPost(options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksReviewersNewPost(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseWorksTestPost(options?: any) {
            return CourseWorksApiFp(configuration).apiCourseWorksTestPost(options)(fetch, basePath);
        },
    };
};

/**
 * CourseWorksApi - object-oriented interface
 * @export
 * @class CourseWorksApi
 * @extends {BaseAPI}
 */
export class CourseWorksApi extends BaseAPI {
    /**
     * 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksApplicationsByStatusGet(status: string, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksApplicationsByStatusGet(status, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksAvailableGet(options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksAvailableGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdDeadlinesGet(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} type 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdFilesByTypeDelete(type: string, courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdFilesByTypeDelete(type, courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} type 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdFilesByTypeGet(type: string, courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdFilesByTypeGet(type, courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdFilesGet(courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdFilesGet(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdGet(courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdGet(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId: number, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdReferenceDelete(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {string} [reference] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByCourseWorkIdReferencePost(courseWorkId: number, reference?: string, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByCourseWorkIdReferencePost(courseWorkId, reference, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} role 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksByRoleMyByStatusGet(role: string, status: string, options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksByRoleMyByStatusGet(role, status, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksDirectionsGet(options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksDirectionsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksReviewersNewPost(options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksReviewersNewPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseWorksApi
     */
    public apiCourseWorksTestPost(options?: any) {
        return CourseWorksApiFp(this.configuration).apiCourseWorksTestPost(options)(this.fetch, this.basePath);
    }

}

/**
 * CuratorCourseWorksApi - fetch parameter creator
 * @export
 */
export const CuratorCourseWorksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/curator/course_works/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateCourseWorkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCourseWorkViewModel || {}) : (createCourseWorkViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsByDirectionIdDelete(directionId: number, options: any = {}): FetchArgs {
            // verify required parameter 'directionId' is not null or undefined
            if (directionId === null || directionId === undefined) {
                throw new RequiredError('directionId','Required parameter directionId was null or undefined when calling apiCuratorDirectionsByDirectionIdDelete.');
            }
            const localVarPath = `/api/curator/directions/{directionId}`
                .replace(`{${"directionId"}}`, encodeURIComponent(String(directionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddDirectionViewModel} [directionViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsPost(directionViewModel?: AddDirectionViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/curator/directions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddDirectionViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(directionViewModel || {}) : (directionViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorInvitePost(email?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/curator/invite`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(email || {}) : (email || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CuratorCourseWorksApi - functional programming interface
 * @export
 */
export const CuratorCourseWorksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = CuratorCourseWorksApiFetchParamCreator(configuration).apiCuratorCourseWorksAddPost(createCourseWorkViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsByDirectionIdDelete(directionId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CuratorCourseWorksApiFetchParamCreator(configuration).apiCuratorDirectionsByDirectionIdDelete(directionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {AddDirectionViewModel} [directionViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsPost(directionViewModel?: AddDirectionViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CuratorCourseWorksApiFetchParamCreator(configuration).apiCuratorDirectionsPost(directionViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorInvitePost(email?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CuratorCourseWorksApiFetchParamCreator(configuration).apiCuratorInvitePost(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CuratorCourseWorksApi - factory interface
 * @export
 */
export const CuratorCourseWorksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
            return CuratorCourseWorksApiFp(configuration).apiCuratorCourseWorksAddPost(createCourseWorkViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsByDirectionIdDelete(directionId: number, options?: any) {
            return CuratorCourseWorksApiFp(configuration).apiCuratorDirectionsByDirectionIdDelete(directionId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {AddDirectionViewModel} [directionViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorDirectionsPost(directionViewModel?: AddDirectionViewModel, options?: any) {
            return CuratorCourseWorksApiFp(configuration).apiCuratorDirectionsPost(directionViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuratorInvitePost(email?: string, options?: any) {
            return CuratorCourseWorksApiFp(configuration).apiCuratorInvitePost(email, options)(fetch, basePath);
        },
    };
};

/**
 * CuratorCourseWorksApi - object-oriented interface
 * @export
 * @class CuratorCourseWorksApi
 * @extends {BaseAPI}
 */
export class CuratorCourseWorksApi extends BaseAPI {
    /**
     * 
     * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuratorCourseWorksApi
     */
    public apiCuratorCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
        return CuratorCourseWorksApiFp(this.configuration).apiCuratorCourseWorksAddPost(createCourseWorkViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} directionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuratorCourseWorksApi
     */
    public apiCuratorDirectionsByDirectionIdDelete(directionId: number, options?: any) {
        return CuratorCourseWorksApiFp(this.configuration).apiCuratorDirectionsByDirectionIdDelete(directionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {AddDirectionViewModel} [directionViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuratorCourseWorksApi
     */
    public apiCuratorDirectionsPost(directionViewModel?: AddDirectionViewModel, options?: any) {
        return CuratorCourseWorksApiFp(this.configuration).apiCuratorDirectionsPost(directionViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuratorCourseWorksApi
     */
    public apiCuratorInvitePost(email?: string, options?: any) {
        return CuratorCourseWorksApiFp(this.configuration).apiCuratorInvitePost(email, options)(this.fetch, this.basePath);
    }

}

/**
 * LecturerCourseWorksApi - fetch parameter creator
 * @export
 */
export const LecturerCourseWorksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdAcceptPost(appId: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiLecturerApplicationsByAppIdAcceptPost.');
            }
            const localVarPath = `/api/lecturer/applications/{appId}/accept`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdGet(appId: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiLecturerApplicationsByAppIdGet.');
            }
            const localVarPath = `/api/lecturer/applications/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdRejectDelete(appId: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiLecturerApplicationsByAppIdRejectDelete.');
            }
            const localVarPath = `/api/lecturer/applications/{appId}/reject`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/lecturer/course_works/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateCourseWorkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCourseWorkViewModel || {}) : (createCourseWorkViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdApplicationsGet.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}/applications`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId: number, type?: string, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}/deadlines`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdDeadlinesPost.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}/deadlines`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddDeadlineViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(addDeadlineViewModel || {}) : (addDeadlineViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdDeadlinesPut.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}/deadlines`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddDeadlineViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(addDeadlineViewModel || {}) : (addDeadlineViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdDelete.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId: number, createCourseWorkViewModel?: CreateCourseWorkViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiLecturerCourseWorksByCourseWorkIdPut.');
            }
            const localVarPath = `/api/lecturer/course_works/{courseWorkId}`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateCourseWorkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCourseWorkViewModel || {}) : (createCourseWorkViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LecturerCourseWorksApi - functional programming interface
 * @export
 */
export const LecturerCourseWorksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdAcceptPost(appId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerApplicationsByAppIdAcceptPost(appId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdGet(appId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LecturerApplicationDTO> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerApplicationsByAppIdGet(appId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdRejectDelete(appId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerApplicationsByAppIdRejectDelete(appId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksAddPost(createCourseWorkViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OverviewApplicationDTO>> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId: number, type?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId, type, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId, addDeadlineViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId, addDeadlineViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId: number, createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LecturerCourseWorksApiFetchParamCreator(configuration).apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId, createCourseWorkViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LecturerCourseWorksApi - factory interface
 * @export
 */
export const LecturerCourseWorksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdAcceptPost(appId: number, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerApplicationsByAppIdAcceptPost(appId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdGet(appId: number, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerApplicationsByAppIdGet(appId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerApplicationsByAppIdRejectDelete(appId: number, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerApplicationsByAppIdRejectDelete(appId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksAddPost(createCourseWorkViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId: number, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId: number, type?: string, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId, type, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId, addDeadlineViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId, addDeadlineViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId: number, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId: number, createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
            return LecturerCourseWorksApiFp(configuration).apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId, createCourseWorkViewModel, options)(fetch, basePath);
        },
    };
};

/**
 * LecturerCourseWorksApi - object-oriented interface
 * @export
 * @class LecturerCourseWorksApi
 * @extends {BaseAPI}
 */
export class LecturerCourseWorksApi extends BaseAPI {
    /**
     * 
     * @param {number} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerApplicationsByAppIdAcceptPost(appId: number, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerApplicationsByAppIdAcceptPost(appId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerApplicationsByAppIdGet(appId: number, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerApplicationsByAppIdGet(appId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerApplicationsByAppIdRejectDelete(appId: number, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerApplicationsByAppIdRejectDelete(appId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksAddPost(createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksAddPost(createCourseWorkViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId: number, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdApplicationsGet(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId: number, type?: string, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesDelete(courseWorkId, type, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPost(courseWorkId, addDeadlineViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {AddDeadlineViewModel} [addDeadlineViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId: number, addDeadlineViewModel?: AddDeadlineViewModel, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdDeadlinesPut(courseWorkId, addDeadlineViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId: number, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdDelete(courseWorkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {CreateCourseWorkViewModel} [createCourseWorkViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LecturerCourseWorksApi
     */
    public apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId: number, createCourseWorkViewModel?: CreateCourseWorkViewModel, options?: any) {
        return LecturerCourseWorksApiFp(this.configuration).apiLecturerCourseWorksByCourseWorkIdPut(courseWorkId, createCourseWorkViewModel, options)(this.fetch, this.basePath);
    }

}

/**
 * StudentCourseWorksApi - fetch parameter creator
 * @export
 */
export const StudentCourseWorksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdDelete(appId: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiStudentApplicationsByAppIdDelete.');
            }
            const localVarPath = `/api/student/applications/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdGet(appId: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiStudentApplicationsByAppIdGet.');
            }
            const localVarPath = `/api/student/applications/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateApplicationViewModel} [createApplicationViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId: number, createApplicationViewModel?: CreateApplicationViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseWorkId' is not null or undefined
            if (courseWorkId === null || courseWorkId === undefined) {
                throw new RequiredError('courseWorkId','Required parameter courseWorkId was null or undefined when calling apiStudentCourseWorksByCourseWorkIdApplyPost.');
            }
            const localVarPath = `/api/student/course_works/{courseWorkId}/apply`
                .replace(`{${"courseWorkId"}}`, encodeURIComponent(String(courseWorkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter["Authorization"] =
                    "Bearer " + authService.getToken();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateApplicationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createApplicationViewModel || {}) : (createApplicationViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentCourseWorksApi - functional programming interface
 * @export
 */
export const StudentCourseWorksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdDelete(appId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentCourseWorksApiFetchParamCreator(configuration).apiStudentApplicationsByAppIdDelete(appId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdGet(appId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentApplicationDTO> {
            const localVarFetchArgs = StudentCourseWorksApiFetchParamCreator(configuration).apiStudentApplicationsByAppIdGet(appId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateApplicationViewModel} [createApplicationViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId: number, createApplicationViewModel?: CreateApplicationViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = StudentCourseWorksApiFetchParamCreator(configuration).apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId, createApplicationViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentCourseWorksApi - factory interface
 * @export
 */
export const StudentCourseWorksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdDelete(appId: number, options?: any) {
            return StudentCourseWorksApiFp(configuration).apiStudentApplicationsByAppIdDelete(appId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentApplicationsByAppIdGet(appId: number, options?: any) {
            return StudentCourseWorksApiFp(configuration).apiStudentApplicationsByAppIdGet(appId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseWorkId 
         * @param {CreateApplicationViewModel} [createApplicationViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId: number, createApplicationViewModel?: CreateApplicationViewModel, options?: any) {
            return StudentCourseWorksApiFp(configuration).apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId, createApplicationViewModel, options)(fetch, basePath);
        },
    };
};

/**
 * StudentCourseWorksApi - object-oriented interface
 * @export
 * @class StudentCourseWorksApi
 * @extends {BaseAPI}
 */
export class StudentCourseWorksApi extends BaseAPI {
    /**
     * 
     * @param {number} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseWorksApi
     */
    public apiStudentApplicationsByAppIdDelete(appId: number, options?: any) {
        return StudentCourseWorksApiFp(this.configuration).apiStudentApplicationsByAppIdDelete(appId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseWorksApi
     */
    public apiStudentApplicationsByAppIdGet(appId: number, options?: any) {
        return StudentCourseWorksApiFp(this.configuration).apiStudentApplicationsByAppIdGet(appId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseWorkId 
     * @param {CreateApplicationViewModel} [createApplicationViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseWorksApi
     */
    public apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId: number, createApplicationViewModel?: CreateApplicationViewModel, options?: any) {
        return StudentCourseWorksApiFp(this.configuration).apiStudentCourseWorksByCourseWorkIdApplyPost(courseWorkId, createApplicationViewModel, options)(this.fetch, this.basePath);
    }

}

