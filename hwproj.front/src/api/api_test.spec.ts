/**
 * API Gateway
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import * as api from "./api"
import { Configuration } from "./configuration"
const config: Configuration = {}
describe("AccountApi", () => {
  let instance: api.AccountApi
  beforeEach(function() {
    instance = new api.AccountApi(config)
  });
  test("accountAuthorizeGithub", () => {
    const code: string = "code_example"
    return expect(instance.accountAuthorizeGithub(code, {})).resolves.toBe(null)
  })
  test("accountEdit", () => {
    const body: api.EditAccountViewModel = undefined
    return expect(instance.accountEdit(body, {})).resolves.toBe(null)
  })
  test("accountGetAllStudents", () => {
    return expect(instance.accountGetAllStudents({})).resolves.toBe(null)
  })
  test("accountGetGithubLoginUrl", () => {
    const body: api.UrlDto = undefined
    return expect(instance.accountGetGithubLoginUrl(body, {})).resolves.toBe(null)
  })
  test("accountGetUserData", () => {
    return expect(instance.accountGetUserData({})).resolves.toBe(null)
  })
  test("accountGetUserDataById", () => {
    const userId: string = "userId_example"
    return expect(instance.accountGetUserDataById(userId, {})).resolves.toBe(null)
  })
  test("accountInviteNewLecturer", () => {
    const body: api.InviteLecturerViewModel = undefined
    return expect(instance.accountInviteNewLecturer(body, {})).resolves.toBe(null)
  })
  test("accountLogin", () => {
    const body: api.LoginViewModel = undefined
    return expect(instance.accountLogin(body, {})).resolves.toBe(null)
  })
  test("accountRefreshToken", () => {
    return expect(instance.accountRefreshToken({})).resolves.toBe(null)
  })
  test("accountRegister", () => {
    const body: api.RegisterViewModel = undefined
    return expect(instance.accountRegister(body, {})).resolves.toBe(null)
  })
  test("accountRequestPasswordRecovery", () => {
    const body: api.RequestPasswordRecoveryViewModel = undefined
    return expect(instance.accountRequestPasswordRecovery(body, {})).resolves.toBe(null)
  })
  test("accountResetPassword", () => {
    const body: api.ResetPasswordViewModel = undefined
    return expect(instance.accountResetPassword(body, {})).resolves.toBe(null)
  })
})
describe("CourseGroupsApi", () => {
  let instance: api.CourseGroupsApi
  beforeEach(function() {
    instance = new api.CourseGroupsApi(config)
  });
  test("courseGroupsAddStudentInGroup", () => {
    const courseId: number = 789
    const groupId: number = 789
    const userId: string = "userId_example"
    return expect(instance.courseGroupsAddStudentInGroup(courseId, groupId, userId, {})).resolves.toBe(null)
  })
  test("courseGroupsCreateCourseGroup", () => {
    const courseId: number = 789
    const body: api.CreateGroupViewModel = undefined
    return expect(instance.courseGroupsCreateCourseGroup(courseId, body, {})).resolves.toBe(null)
  })
  test("courseGroupsDeleteCourseGroup", () => {
    const courseId: number = 789
    const groupId: number = 789
    return expect(instance.courseGroupsDeleteCourseGroup(courseId, groupId, {})).resolves.toBe(null)
  })
  test("courseGroupsGetAllCourseGroups", () => {
    const courseId: number = 789
    return expect(instance.courseGroupsGetAllCourseGroups(courseId, {})).resolves.toBe(null)
  })
  test("courseGroupsGetCourseGroupsById", () => {
    const courseId: number = 789
    return expect(instance.courseGroupsGetCourseGroupsById(courseId, {})).resolves.toBe(null)
  })
  test("courseGroupsGetGroup", () => {
    const groupId: number = 789
    return expect(instance.courseGroupsGetGroup(groupId, {})).resolves.toBe(null)
  })
  test("courseGroupsGetGroupTasks", () => {
    const groupId: number = 789
    return expect(instance.courseGroupsGetGroupTasks(groupId, {})).resolves.toBe(null)
  })
  test("courseGroupsRemoveStudentFromGroup", () => {
    const courseId: number = 789
    const groupId: number = 789
    const userId: string = "userId_example"
    return expect(instance.courseGroupsRemoveStudentFromGroup(courseId, groupId, userId, {})).resolves.toBe(null)
  })
  test("courseGroupsUpdateCourseGroup", () => {
    const courseId: number = 789
    const groupId: number = 789
    const body: api.UpdateGroupViewModel = undefined
    return expect(instance.courseGroupsUpdateCourseGroup(courseId, groupId, body, {})).resolves.toBe(null)
  })
})
describe("CoursesApi", () => {
  let instance: api.CoursesApi
  beforeEach(function() {
    instance = new api.CoursesApi(config)
  });
  test("coursesAcceptLecturer", () => {
    const courseId: number = 789
    const lecturerEmail: string = "lecturerEmail_example"
    return expect(instance.coursesAcceptLecturer(courseId, lecturerEmail, {})).resolves.toBe(null)
  })
  test("coursesAcceptStudent", () => {
    const courseId: number = 789
    const studentId: string = "studentId_example"
    return expect(instance.coursesAcceptStudent(courseId, studentId, {})).resolves.toBe(null)
  })
  test("coursesCreateCourse", () => {
    const body: api.CreateCourseViewModel = undefined
    return expect(instance.coursesCreateCourse(body, {})).resolves.toBe(null)
  })
  test("coursesDeleteCourse", () => {
    const courseId: number = 789
    return expect(instance.coursesDeleteCourse(courseId, {})).resolves.toBe(null)
  })
  test("coursesEditMentorWorkspace", () => {
    const courseId: number = 789
    const mentorId: string = "mentorId_example"
    const body: api.EditMentorWorkspaceDTO = undefined
    return expect(instance.coursesEditMentorWorkspace(courseId, mentorId, body, {})).resolves.toBe(null)
  })
  test("coursesGetAllCourseData", () => {
    const courseId: number = 789
    return expect(instance.coursesGetAllCourseData(courseId, {})).resolves.toBe(null)
  })
  test("coursesGetAllCourses", () => {
    return expect(instance.coursesGetAllCourses({})).resolves.toBe(null)
  })
  test("coursesGetAllTagsForCourse", () => {
    const courseId: number = 789
    return expect(instance.coursesGetAllTagsForCourse(courseId, {})).resolves.toBe(null)
  })
  test("coursesGetAllUserCourses", () => {
    return expect(instance.coursesGetAllUserCourses({})).resolves.toBe(null)
  })
  test("coursesGetCourseData", () => {
    const courseId: number = 789
    return expect(instance.coursesGetCourseData(courseId, {})).resolves.toBe(null)
  })
  test("coursesGetGroups", () => {
    const programName: string = "programName_example"
    return expect(instance.coursesGetGroups(programName, {})).resolves.toBe(null)
  })
  test("coursesGetLecturersAvailableForCourse", () => {
    const courseId: number = 789
    return expect(instance.coursesGetLecturersAvailableForCourse(courseId, {})).resolves.toBe(null)
  })
  test("coursesGetMentorWorkspace", () => {
    const courseId: number = 789
    const mentorId: string = "mentorId_example"
    return expect(instance.coursesGetMentorWorkspace(courseId, mentorId, {})).resolves.toBe(null)
  })
  test("coursesGetProgramNames", () => {
    return expect(instance.coursesGetProgramNames({})).resolves.toBe(null)
  })
  test("coursesRejectStudent", () => {
    const courseId: number = 789
    const studentId: string = "studentId_example"
    return expect(instance.coursesRejectStudent(courseId, studentId, {})).resolves.toBe(null)
  })
  test("coursesSignInCourse", () => {
    const courseId: number = 789
    return expect(instance.coursesSignInCourse(courseId, {})).resolves.toBe(null)
  })
  test("coursesUpdateCourse", () => {
    const courseId: number = 789
    const body: api.UpdateCourseViewModel = undefined
    return expect(instance.coursesUpdateCourse(courseId, body, {})).resolves.toBe(null)
  })
  test("coursesUpdateStudentCharacteristics", () => {
    const courseId: number = 789
    const studentId: string = "studentId_example"
    const body: api.StudentCharacteristicsDto = undefined
    return expect(instance.coursesUpdateStudentCharacteristics(courseId, studentId, body, {})).resolves.toBe(null)
  })
  test("coursesinviteExistentStudent", () => {
    const body: api.InviteExistentStudentViewModel = undefined
    return expect(instance.coursesinviteExistentStudent(body, {})).resolves.toBe(null)
  })
})
describe("ExpertsApi", () => {
  let instance: api.ExpertsApi
  beforeEach(function() {
    instance = new api.ExpertsApi(config)
  });
  test("expertsGetAll", () => {
    return expect(instance.expertsGetAll({})).resolves.toBe(null)
  })
  test("expertsGetIsProfileEdited", () => {
    return expect(instance.expertsGetIsProfileEdited({})).resolves.toBe(null)
  })
  test("expertsGetToken", () => {
    const expertEmail: string = "expertEmail_example"
    return expect(instance.expertsGetToken(expertEmail, {})).resolves.toBe(null)
  })
  test("expertsInvite", () => {
    const body: api.InviteExpertViewModel = undefined
    return expect(instance.expertsInvite(body, {})).resolves.toBe(null)
  })
  test("expertsLogin", () => {
    const body: api.TokenCredentials = undefined
    return expect(instance.expertsLogin(body, {})).resolves.toBe(null)
  })
  test("expertsRegister", () => {
    const body: api.RegisterExpertViewModel = undefined
    return expect(instance.expertsRegister(body, {})).resolves.toBe(null)
  })
  test("expertsSetProfileIsEdited", () => {
    return expect(instance.expertsSetProfileIsEdited({})).resolves.toBe(null)
  })
  test("expertsUpdateTags", () => {
    const body: api.UpdateExpertTagsDTO = undefined
    return expect(instance.expertsUpdateTags(body, {})).resolves.toBe(null)
  })
})
describe("FilesApi", () => {
  let instance: api.FilesApi
  beforeEach(function() {
    instance = new api.FilesApi(config)
  });
  test("filesDeleteFile", () => {
    const courseId: number = 789
    const key: string = "key_example"
    return expect(instance.filesDeleteFile(courseId, key, {})).resolves.toBe(null)
  })
  test("filesGetDownloadLink", () => {
    const key: string = "key_example"
    return expect(instance.filesGetDownloadLink(key, {})).resolves.toBe(null)
  })
  test("filesGetFilesInfo", () => {
    const courseId: number = 789
    const homeworkId: number = 789
    return expect(instance.filesGetFilesInfo(courseId, homeworkId, {})).resolves.toBe(null)
  })
  test("filesUpload", () => {
    const courseId: number = 789
    const homeworkId: number = 789
    const file: Blob = "file_example"
    return expect(instance.filesUpload(courseId, homeworkId, file, {})).resolves.toBe(null)
  })
})
describe("HomeworksApi", () => {
  let instance: api.HomeworksApi
  beforeEach(function() {
    instance = new api.HomeworksApi(config)
  });
  test("homeworksAddHomework", () => {
    const courseId: number = 789
    const body: api.CreateHomeworkViewModel = undefined
    return expect(instance.homeworksAddHomework(courseId, body, {})).resolves.toBe(null)
  })
  test("homeworksDeleteHomework", () => {
    const homeworkId: number = 789
    return expect(instance.homeworksDeleteHomework(homeworkId, {})).resolves.toBe(null)
  })
  test("homeworksGetForEditingHomework", () => {
    const homeworkId: number = 789
    return expect(instance.homeworksGetForEditingHomework(homeworkId, {})).resolves.toBe(null)
  })
  test("homeworksGetHomework", () => {
    const homeworkId: number = 789
    return expect(instance.homeworksGetHomework(homeworkId, {})).resolves.toBe(null)
  })
  test("homeworksUpdateHomework", () => {
    const homeworkId: number = 789
    const body: api.CreateHomeworkViewModel = undefined
    return expect(instance.homeworksUpdateHomework(homeworkId, body, {})).resolves.toBe(null)
  })
})
describe("NotificationsApi", () => {
  let instance: api.NotificationsApi
  beforeEach(function() {
    instance = new api.NotificationsApi(config)
  });
  test("notificationsChangeSetting", () => {
    const body: api.NotificationsSettingDto = undefined
    return expect(instance.notificationsChangeSetting(body, {})).resolves.toBe(null)
  })
  test("notificationsGet", () => {
    return expect(instance.notificationsGet({})).resolves.toBe(null)
  })
  test("notificationsGetNewNotificationsCount", () => {
    return expect(instance.notificationsGetNewNotificationsCount({})).resolves.toBe(null)
  })
  test("notificationsGetSettings", () => {
    return expect(instance.notificationsGetSettings({})).resolves.toBe(null)
  })
  test("notificationsMarkAsSeen", () => {
    const body: Array<number> = undefined
    return expect(instance.notificationsMarkAsSeen(body, {})).resolves.toBe(null)
  })
})
describe("SolutionsApi", () => {
  let instance: api.SolutionsApi
  beforeEach(function() {
    instance = new api.SolutionsApi(config)
  });
  test("solutionsDeleteSolution", () => {
    const solutionId: number = 789
    return expect(instance.solutionsDeleteSolution(solutionId, {})).resolves.toBe(null)
  })
  test("solutionsGetSolutionAchievement", () => {
    const taskId: number = 789
    const solutionId: number = 789
    return expect(instance.solutionsGetSolutionAchievement(taskId, solutionId, {})).resolves.toBe(null)
  })
  test("solutionsGetSolutionActuality", () => {
    const solutionId: number = 789
    return expect(instance.solutionsGetSolutionActuality(solutionId, {})).resolves.toBe(null)
  })
  test("solutionsGetSolutionById", () => {
    const solutionId: number = 789
    return expect(instance.solutionsGetSolutionById(solutionId, {})).resolves.toBe(null)
  })
  test("solutionsGetStudentSolution", () => {
    const taskId: number = 789
    const studentId: string = "studentId_example"
    return expect(instance.solutionsGetStudentSolution(taskId, studentId, {})).resolves.toBe(null)
  })
  test("solutionsGetTaskSolutionsPageData", () => {
    const taskId: number = 789
    return expect(instance.solutionsGetTaskSolutionsPageData(taskId, {})).resolves.toBe(null)
  })
  test("solutionsGetUnratedSolutions", () => {
    const taskId: number = 789
    return expect(instance.solutionsGetUnratedSolutions(taskId, {})).resolves.toBe(null)
  })
  test("solutionsGiveUp", () => {
    const taskId: number = 789
    return expect(instance.solutionsGiveUp(taskId, {})).resolves.toBe(null)
  })
  test("solutionsMarkSolution", () => {
    const solutionId: number = 789
    return expect(instance.solutionsMarkSolution(solutionId, {})).resolves.toBe(null)
  })
  test("solutionsPostEmptySolutionWithRate", () => {
    const taskId: number = 789
    const body: api.SolutionViewModel = undefined
    return expect(instance.solutionsPostEmptySolutionWithRate(taskId, body, {})).resolves.toBe(null)
  })
  test("solutionsPostSolution", () => {
    const taskId: number = 789
    const body: api.SolutionViewModel = undefined
    return expect(instance.solutionsPostSolution(taskId, body, {})).resolves.toBe(null)
  })
  test("solutionsRateSolution", () => {
    const solutionId: number = 789
    const body: api.RateSolutionModel = undefined
    return expect(instance.solutionsRateSolution(solutionId, body, {})).resolves.toBe(null)
  })
})
describe("StatisticsApi", () => {
  let instance: api.StatisticsApi
  beforeEach(function() {
    instance = new api.StatisticsApi(config)
  });
  test("statisticsGetChartStatistics", () => {
    const courseId: number = 789
    return expect(instance.statisticsGetChartStatistics(courseId, {})).resolves.toBe(null)
  })
  test("statisticsGetCourseStatistics", () => {
    const courseId: number = 789
    return expect(instance.statisticsGetCourseStatistics(courseId, {})).resolves.toBe(null)
  })
  test("statisticsGetLecturersStatistics", () => {
    const courseId: number = 789
    return expect(instance.statisticsGetLecturersStatistics(courseId, {})).resolves.toBe(null)
  })
})
describe("SystemApi", () => {
  let instance: api.SystemApi
  beforeEach(function() {
    instance = new api.SystemApi(config)
  });
  test("systemStatus", () => {
    return expect(instance.systemStatus({})).resolves.toBe(null)
  })
})
describe("TasksApi", () => {
  let instance: api.TasksApi
  beforeEach(function() {
    instance = new api.TasksApi(config)
  });
  test("tasksAddAnswerForQuestion", () => {
    const body: api.AddAnswerForQuestionDto = undefined
    return expect(instance.tasksAddAnswerForQuestion(body, {})).resolves.toBe(null)
  })
  test("tasksAddQuestionForTask", () => {
    const body: api.AddTaskQuestionDto = undefined
    return expect(instance.tasksAddQuestionForTask(body, {})).resolves.toBe(null)
  })
  test("tasksAddTask", () => {
    const homeworkId: number = 789
    const body: api.CreateTaskViewModel = undefined
    return expect(instance.tasksAddTask(homeworkId, body, {})).resolves.toBe(null)
  })
  test("tasksDeleteTask", () => {
    const taskId: number = 789
    return expect(instance.tasksDeleteTask(taskId, {})).resolves.toBe(null)
  })
  test("tasksGetForEditingTask", () => {
    const taskId: number = 789
    return expect(instance.tasksGetForEditingTask(taskId, {})).resolves.toBe(null)
  })
  test("tasksGetQuestionsForTask", () => {
    const taskId: number = 789
    return expect(instance.tasksGetQuestionsForTask(taskId, {})).resolves.toBe(null)
  })
  test("tasksGetTask", () => {
    const taskId: number = 789
    return expect(instance.tasksGetTask(taskId, {})).resolves.toBe(null)
  })
  test("tasksUpdateTask", () => {
    const taskId: number = 789
    const body: api.CreateTaskViewModel = undefined
    return expect(instance.tasksUpdateTask(taskId, body, {})).resolves.toBe(null)
  })
})
