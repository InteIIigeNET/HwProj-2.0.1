/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Homeworks API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:5000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CreateHomeworkViewModel
 */
export interface CreateHomeworkViewModel {
    /**
     * 
     * @type {string}
     * @memberof CreateHomeworkViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHomeworkViewModel
     */
    description?: string;
}

/**
 * 
 * @export
 * @interface CreateTaskViewModel
 */
export interface CreateTaskViewModel {
    /**
     * 
     * @type {string}
     * @memberof CreateTaskViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskViewModel
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTaskViewModel
     */
    maxRating?: number;
}

/**
 * 
 * @export
 * @interface HomeworkTaskViewModel
 */
export interface HomeworkTaskViewModel {
    /**
     * 
     * @type {number}
     * @memberof HomeworkTaskViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeworkTaskViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeworkTaskViewModel
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof HomeworkTaskViewModel
     */
    maxRating?: number;
    /**
     * 
     * @type {number}
     * @memberof HomeworkTaskViewModel
     */
    homeworkId?: number;
}

/**
 * 
 * @export
 * @interface HomeworkViewModel
 */
export interface HomeworkViewModel {
    /**
     * 
     * @type {number}
     * @memberof HomeworkViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeworkViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeworkViewModel
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof HomeworkViewModel
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof HomeworkViewModel
     */
    courseId?: number;
    /**
     * 
     * @type {Array<HomeworkTaskViewModel>}
     * @memberof HomeworkViewModel
     */
    tasks?: Array<HomeworkTaskViewModel>;
}


/**
 * HomeworksApi - fetch parameter creator
 * @export
 */
export const HomeworksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksByCourseIdPost(courseId: number, homeworkViewModel?: CreateHomeworkViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling apiHomeworksByCourseIdPost.');
            }
            const localVarPath = `/api/Homeworks/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateHomeworkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(homeworkViewModel || {}) : (homeworkViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksCourseHomeworksByCourseIdGet(courseId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling apiHomeworksCourseHomeworksByCourseIdGet.');
            }
            const localVarPath = `/api/Homeworks/course_homeworks/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksDeleteByHomeworkIdDelete(homeworkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'homeworkId' is not null or undefined
            if (homeworkId === null || homeworkId === undefined) {
                throw new RequiredError('homeworkId','Required parameter homeworkId was null or undefined when calling apiHomeworksDeleteByHomeworkIdDelete.');
            }
            const localVarPath = `/api/Homeworks/delete/{homeworkId}`
                .replace(`{${"homeworkId"}}`, encodeURIComponent(String(homeworkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Homeworks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGetByHomeworkIdGet(homeworkId: number, options: any = {}): FetchArgs {
            // verify required parameter 'homeworkId' is not null or undefined
            if (homeworkId === null || homeworkId === undefined) {
                throw new RequiredError('homeworkId','Required parameter homeworkId was null or undefined when calling apiHomeworksGetByHomeworkIdGet.');
            }
            const localVarPath = `/api/Homeworks/get/{homeworkId}`
                .replace(`{${"homeworkId"}}`, encodeURIComponent(String(homeworkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksUpdateByHomeworkIdPut(homeworkId: number, homeworkViewModel?: CreateHomeworkViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'homeworkId' is not null or undefined
            if (homeworkId === null || homeworkId === undefined) {
                throw new RequiredError('homeworkId','Required parameter homeworkId was null or undefined when calling apiHomeworksUpdateByHomeworkIdPut.');
            }
            const localVarPath = `/api/Homeworks/update/{homeworkId}`
                .replace(`{${"homeworkId"}}`, encodeURIComponent(String(homeworkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateHomeworkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(homeworkViewModel || {}) : (homeworkViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeworksApi - functional programming interface
 * @export
 */
export const HomeworksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksByCourseIdPost(courseId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksByCourseIdPost(courseId, homeworkViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksCourseHomeworksByCourseIdGet(courseId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HomeworkViewModel>> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksCourseHomeworksByCourseIdGet(courseId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksDeleteByHomeworkIdDelete(homeworkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksDeleteByHomeworkIdDelete(homeworkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HomeworkViewModel>> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGetByHomeworkIdGet(homeworkId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksGetByHomeworkIdGet(homeworkId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksUpdateByHomeworkIdPut(homeworkId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = HomeworksApiFetchParamCreator(configuration).apiHomeworksUpdateByHomeworkIdPut(homeworkId, homeworkViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HomeworksApi - factory interface
 * @export
 */
export const HomeworksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksByCourseIdPost(courseId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksByCourseIdPost(courseId, homeworkViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksCourseHomeworksByCourseIdGet(courseId: number, options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksCourseHomeworksByCourseIdGet(courseId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksDeleteByHomeworkIdDelete(homeworkId: number, options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksDeleteByHomeworkIdDelete(homeworkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGet(options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksGetByHomeworkIdGet(homeworkId: number, options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksGetByHomeworkIdGet(homeworkId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateHomeworkViewModel} [homeworkViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeworksUpdateByHomeworkIdPut(homeworkId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any) {
            return HomeworksApiFp(configuration).apiHomeworksUpdateByHomeworkIdPut(homeworkId, homeworkViewModel, options)(fetch, basePath);
        },
    };
};

/**
 * HomeworksApi - object-oriented interface
 * @export
 * @class HomeworksApi
 * @extends {BaseAPI}
 */
export class HomeworksApi extends BaseAPI {
    /**
     * 
     * @param {number} courseId 
     * @param {CreateHomeworkViewModel} [homeworkViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksByCourseIdPost(courseId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksByCourseIdPost(courseId, homeworkViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksCourseHomeworksByCourseIdGet(courseId: number, options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksCourseHomeworksByCourseIdGet(courseId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} homeworkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksDeleteByHomeworkIdDelete(homeworkId: number, options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksDeleteByHomeworkIdDelete(homeworkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksGet(options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} homeworkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksGetByHomeworkIdGet(homeworkId: number, options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksGetByHomeworkIdGet(homeworkId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} homeworkId 
     * @param {CreateHomeworkViewModel} [homeworkViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeworksApi
     */
    public apiHomeworksUpdateByHomeworkIdPut(homeworkId: number, homeworkViewModel?: CreateHomeworkViewModel, options?: any) {
        return HomeworksApiFp(this.configuration).apiHomeworksUpdateByHomeworkIdPut(homeworkId, homeworkViewModel, options)(this.fetch, this.basePath);
    }

}

/**
 * TasksApi - fetch parameter creator
 * @export
 */
export const TasksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksByHomeworkIdPost(homeworkId: number, taskViewModel?: CreateTaskViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'homeworkId' is not null or undefined
            if (homeworkId === null || homeworkId === undefined) {
                throw new RequiredError('homeworkId','Required parameter homeworkId was null or undefined when calling apiTasksByHomeworkIdPost.');
            }
            const localVarPath = `/api/Tasks/{homeworkId}`
                .replace(`{${"homeworkId"}}`, encodeURIComponent(String(homeworkId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateTaskViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(taskViewModel || {}) : (taskViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksDeleteByTaskIdDelete(taskId: number, options: any = {}): FetchArgs {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiTasksDeleteByTaskIdDelete.');
            }
            const localVarPath = `/api/Tasks/delete/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Tasks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGetByTaskIdGet(taskId: number, options: any = {}): FetchArgs {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiTasksGetByTaskIdGet.');
            }
            const localVarPath = `/api/Tasks/get/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksUpdateByTaskIdPost(taskId: number, taskViewModel?: CreateTaskViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiTasksUpdateByTaskIdPost.');
            }
            const localVarPath = `/api/Tasks/update/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateTaskViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(taskViewModel || {}) : (taskViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksByHomeworkIdPost(homeworkId: number, taskViewModel?: CreateTaskViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = TasksApiFetchParamCreator(configuration).apiTasksByHomeworkIdPost(homeworkId, taskViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksDeleteByTaskIdDelete(taskId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TasksApiFetchParamCreator(configuration).apiTasksDeleteByTaskIdDelete(taskId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HomeworkTaskViewModel>> {
            const localVarFetchArgs = TasksApiFetchParamCreator(configuration).apiTasksGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGetByTaskIdGet(taskId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TasksApiFetchParamCreator(configuration).apiTasksGetByTaskIdGet(taskId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} taskId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksUpdateByTaskIdPost(taskId: number, taskViewModel?: CreateTaskViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TasksApiFetchParamCreator(configuration).apiTasksUpdateByTaskIdPost(taskId, taskViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} homeworkId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksByHomeworkIdPost(homeworkId: number, taskViewModel?: CreateTaskViewModel, options?: any) {
            return TasksApiFp(configuration).apiTasksByHomeworkIdPost(homeworkId, taskViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksDeleteByTaskIdDelete(taskId: number, options?: any) {
            return TasksApiFp(configuration).apiTasksDeleteByTaskIdDelete(taskId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGet(options?: any) {
            return TasksApiFp(configuration).apiTasksGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksGetByTaskIdGet(taskId: number, options?: any) {
            return TasksApiFp(configuration).apiTasksGetByTaskIdGet(taskId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} taskId 
         * @param {CreateTaskViewModel} [taskViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksUpdateByTaskIdPost(taskId: number, taskViewModel?: CreateTaskViewModel, options?: any) {
            return TasksApiFp(configuration).apiTasksUpdateByTaskIdPost(taskId, taskViewModel, options)(fetch, basePath);
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * 
     * @param {number} homeworkId 
     * @param {CreateTaskViewModel} [taskViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksByHomeworkIdPost(homeworkId: number, taskViewModel?: CreateTaskViewModel, options?: any) {
        return TasksApiFp(this.configuration).apiTasksByHomeworkIdPost(homeworkId, taskViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksDeleteByTaskIdDelete(taskId: number, options?: any) {
        return TasksApiFp(this.configuration).apiTasksDeleteByTaskIdDelete(taskId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksGet(options?: any) {
        return TasksApiFp(this.configuration).apiTasksGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksGetByTaskIdGet(taskId: number, options?: any) {
        return TasksApiFp(this.configuration).apiTasksGetByTaskIdGet(taskId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} taskId 
     * @param {CreateTaskViewModel} [taskViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksUpdateByTaskIdPost(taskId: number, taskViewModel?: CreateTaskViewModel, options?: any) {
        return TasksApiFp(this.configuration).apiTasksUpdateByTaskIdPost(taskId, taskViewModel, options)(this.fetch, this.basePath);
    }

}

