/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Courses API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";
import AuthService from '../../services/AuthService'

const BASE_PATH = "http://localhost:5000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CourseMateViewModel
 */
export interface CourseMateViewModel {
    /**
     * 
     * @type {string}
     * @memberof CourseMateViewModel
     */
    studentId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CourseMateViewModel
     */
    isAccepted?: boolean;
}

/**
 * 
 * @export
 * @interface CourseViewModel
 */
export interface CourseViewModel {
    /**
     * 
     * @type {number}
     * @memberof CourseViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    groupName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CourseViewModel
     */
    isOpen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CourseViewModel
     */
    isComplete?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CourseViewModel
     */
    mentorId?: string;
    /**
     * 
     * @type {Array<CourseMateViewModel>}
     * @memberof CourseViewModel
     */
    courseMates?: Array<CourseMateViewModel>;
}

/**
 * 
 * @export
 * @interface CreateCourseViewModel
 */
export interface CreateCourseViewModel {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseViewModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseViewModel
     */
    groupName: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCourseViewModel
     */
    isOpen: boolean;
}

/**
 * 
 * @export
 * @interface UpdateCourseViewModel
 */
export interface UpdateCourseViewModel {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseViewModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseViewModel
     */
    groupName: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCourseViewModel
     */
    isOpen: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCourseViewModel
     */
    isComplete?: boolean;
}


/**
 * CoursesApi - fetch parameter creator
 * @export
 */
export const CoursesApiFetchParamCreator = function (configuration?: Configuration) {
    return {

        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptStudent(courseId: number, studentId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling acceptStudent.');
            }
            const localVarPath = `/api/Courses/accept_student/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourse(courseViewModel?: CreateCourseViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Courses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateCourseViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(courseViewModel || {}) : (courseViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCourse.');
            }
            const localVarPath = `/api/Courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/Courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/Courses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorCourses(mentorId: string, options: any = {}): FetchArgs {
            // verify required parameter 'mentorId' is not null or undefined
            if (mentorId === null || mentorId === undefined) {
                throw new RequiredError('mentorId','Required parameter mentorId was null or undefined when calling getMentorCourses.');
            }
            const localVarPath = `/api/Courses/mentor_courses/{mentorId}`
                .replace(`{${"mentorId"}}`, encodeURIComponent(String(mentorId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCourses(studentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'studentId' is not null or undefined
            if (studentId === null || studentId === undefined) {
                throw new RequiredError('studentId','Required parameter studentId was null or undefined when calling getStudentCourses.');
            }
            const localVarPath = `/api/Courses/student_courses/{studentId}`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectStudent(courseId: number, studentId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling rejectStudent.');
            }
            const localVarPath = `/api/Courses/reject_student/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInCourse(courseId: number, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling signInCourse.');
            }
            const localVarPath = `/api/Courses/sign_in_course/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {UpdateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(courseId: number, courseViewModel?: UpdateCourseViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling updateCourse.');
            }
            const localVarPath = `/api/Courses/update/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let authService = new AuthService();
            if (authService.isLoggedIn()) {
                localVarHeaderParameter['Authorization'] = 'Bearer ' + authService.getToken()
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateCourseViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(courseViewModel || {}) : (courseViewModel || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptStudent(courseId: number, studentId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).acceptStudent(courseId, studentId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourse(courseViewModel?: CreateCourseViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).addCourse(courseViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).deleteCourse(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CourseViewModel>> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).getAll(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorCourses(mentorId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<number>> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).getMentorCourses(mentorId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCourses(studentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<number>> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).getStudentCourses(studentId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectStudent(courseId: number, studentId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).rejectStudent(courseId, studentId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInCourse(courseId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).signInCourse(courseId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {UpdateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(courseId: number, courseViewModel?: UpdateCourseViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).updateCourse(courseId, courseViewModel, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptStudent(courseId: number, studentId?: string, options?: any) {
            return CoursesApiFp(configuration).acceptStudent(courseId, studentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourse(courseViewModel?: CreateCourseViewModel, options?: any) {
            return CoursesApiFp(configuration).addCourse(courseViewModel, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(id: number, options?: any) {
            return CoursesApiFp(configuration).deleteCourse(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any) {
            return CoursesApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any) {
            return CoursesApiFp(configuration).getAll(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorCourses(mentorId: string, options?: any) {
            return CoursesApiFp(configuration).getMentorCourses(mentorId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCourses(studentId: string, options?: any) {
            return CoursesApiFp(configuration).getStudentCourses(studentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectStudent(courseId: number, studentId?: string, options?: any) {
            return CoursesApiFp(configuration).rejectStudent(courseId, studentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInCourse(courseId: number, options?: any) {
            return CoursesApiFp(configuration).signInCourse(courseId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {UpdateCourseViewModel} [courseViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(courseId: number, courseViewModel?: UpdateCourseViewModel, options?: any) {
            return CoursesApiFp(configuration).updateCourse(courseId, courseViewModel, options)(fetch, basePath);
        },
    };
};

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * 
     * @param {number} courseId 
     * @param {string} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public acceptStudent(courseId: number, studentId?: string, options?: any) {
        return CoursesApiFp(this.configuration).acceptStudent(courseId, studentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateCourseViewModel} [courseViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public addCourse(courseViewModel?: CreateCourseViewModel, options?: any) {
        return CoursesApiFp(this.configuration).addCourse(courseViewModel, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public deleteCourse(id: number, options?: any) {
        return CoursesApiFp(this.configuration).deleteCourse(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public get(id: number, options?: any) {
        return CoursesApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getAll(options?: any) {
        return CoursesApiFp(this.configuration).getAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} mentorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getMentorCourses(mentorId: string, options?: any) {
        return CoursesApiFp(this.configuration).getMentorCourses(mentorId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getStudentCourses(studentId: string, options?: any) {
        return CoursesApiFp(this.configuration).getStudentCourses(studentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseId 
     * @param {string} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public rejectStudent(courseId: number, studentId?: string, options?: any) {
        return CoursesApiFp(this.configuration).rejectStudent(courseId, studentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public signInCourse(courseId: number, options?: any) {
        return CoursesApiFp(this.configuration).signInCourse(courseId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} courseId 
     * @param {UpdateCourseViewModel} [courseViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public updateCourse(courseId: number, courseViewModel?: UpdateCourseViewModel, options?: any) {
        return CoursesApiFp(this.configuration).updateCourse(courseId, courseViewModel, options)(this.fetch, this.basePath);
    }

}

